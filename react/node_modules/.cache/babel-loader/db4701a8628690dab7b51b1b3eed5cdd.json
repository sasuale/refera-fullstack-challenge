{"ast":null,"code":"import _react, { useContext, useLayoutEffect, useMemo, useState } from \"react\"; // Default context value to use in case there is no SSRProvider. This is fine for\n// client-only apps. In order to support multiple copies of React Aria potentially\n// being on the page at once, the prefix is set to a random number. SSRProvider\n// will reset this to zero for consistency between server and client, so in the\n// SSR case multiple copies of React Aria is not supported.\n\nconst $f01a183cc7bdff77849e49ad26eb904$var$defaultContext = {\n  prefix: String(Math.round(Math.random() * 10000000000)),\n  current: 0\n};\n\nconst $f01a183cc7bdff77849e49ad26eb904$var$SSRContext = /*#__PURE__*/_react.createContext($f01a183cc7bdff77849e49ad26eb904$var$defaultContext);\n/**\n * When using SSR with React Aria, applications must be wrapped in an SSRProvider.\n * This ensures that auto generated ids are consistent between the client and server.\n */\n\n\nexport function SSRProvider(props) {\n  let cur = useContext($f01a183cc7bdff77849e49ad26eb904$var$SSRContext);\n  let value = useMemo(() => ({\n    // If this is the first SSRProvider, start with an empty string prefix, otherwise\n    // append and increment the counter.\n    prefix: cur === $f01a183cc7bdff77849e49ad26eb904$var$defaultContext ? '' : cur.prefix + \"-\" + ++cur.current,\n    current: 0\n  }), [cur]);\n  return /*#__PURE__*/_react.createElement($f01a183cc7bdff77849e49ad26eb904$var$SSRContext.Provider, {\n    value: value\n  }, props.children);\n}\nlet $f01a183cc7bdff77849e49ad26eb904$var$canUseDOM = Boolean(typeof window !== 'undefined' && window.document && window.document.createElement);\n/** @private */\n\nexport function useSSRSafeId(defaultId) {\n  let ctx = useContext($f01a183cc7bdff77849e49ad26eb904$var$SSRContext); // If we are rendering in a non-DOM environment, and there's no SSRProvider,\n  // provide a warning to hint to the developer to add one.\n\n  if (ctx === $f01a183cc7bdff77849e49ad26eb904$var$defaultContext && !$f01a183cc7bdff77849e49ad26eb904$var$canUseDOM) {\n    console.warn('When server rendering, you must wrap your application in an <SSRProvider> to ensure consistent ids are generated between the client and server.');\n  }\n\n  return useMemo(() => defaultId || \"react-aria\" + ctx.prefix + \"-\" + ++ctx.current, [defaultId]);\n}\n/**\n * Returns whether the component is currently being server side rendered or\n * hydrated on the client. Can be used to delay browser-specific rendering\n * until after hydration.\n */\n\nexport function useIsSSR() {\n  let cur = useContext($f01a183cc7bdff77849e49ad26eb904$var$SSRContext);\n  let isInSSRContext = cur !== $f01a183cc7bdff77849e49ad26eb904$var$defaultContext;\n  let [isSSR, setIsSSR] = useState(isInSSRContext); // If on the client, and the component was initially server rendered,\n  // then schedule a layout effect to update the component after hydration.\n\n  if (typeof window !== 'undefined' && isInSSRContext) {\n    // This if statement technically breaks the rules of hooks, but is safe\n    // because the condition never changes after mounting.\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useLayoutEffect(() => {\n      setIsSSR(false);\n    }, []);\n  }\n\n  return isSSR;\n}","map":null,"metadata":{},"sourceType":"module"}